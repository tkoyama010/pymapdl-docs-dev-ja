
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/geometry.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_geometry.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_geometry.py:


.. _ref_3d_bracket_example:

Plotting and Mesh Access
------------------------

PyMAPDL can load basic IGES geometry for analysis.

This example demonstrates loading basic geometry into MAPDL for
analysis and demonstrates how to use the built-in Python specific
plotting functionality.

This example also demonstrates some of the more advanced features of
PyMAPDL including direct mesh access through VTK.

.. GENERATED FROM PYTHON SOURCE LINES 39-48

.. code-block:: Python


    import numpy as np

    from ansys.mapdl import core as pymapdl
    from ansys.mapdl.core import examples

    mapdl = pymapdl.launch_mapdl()



.. GENERATED FROM PYTHON SOURCE LINES 50-54

Load Geometry
~~~~~~~~~~~~~
Here we download a simple example bracket IGES file and load it into
MAPDL.  Since ``igesin`` must be in the AUX15 process

.. GENERATED FROM PYTHON SOURCE LINES 54-64

.. code-block:: Python


    # note that this method just returns a file path
    bracket_file = examples.download_bracket()

    # load the bracket and then print out the geometry
    mapdl.aux15()
    mapdl.igesin(bracket_file)
    print(mapdl.geometry)



.. GENERATED FROM PYTHON SOURCE LINES 65-73

Plotting
~~~~~~~~
PyMAPDL uses VTK and pyvista as a plotting backend to enable
remotable (with 2021R1 and newer) interactive plotting.  The common
plotting methods (``kplot``, ``lplot``, ``aplot``, ``eplot``, etc.)
all have compatible commands that use the
:func:`ansys.mapdl.core.plotting.general_plotter` function.  You can
configure this method with a variety of keyword arguments.  For example:

.. GENERATED FROM PYTHON SOURCE LINES 73-86

.. code-block:: Python


    mapdl.lplot(
        show_line_numbering=False,
        background="k",
        line_width=3,
        color="w",
        show_axes=False,
        show_bounds=True,
        title="",
        cpos="xz",
    )



.. GENERATED FROM PYTHON SOURCE LINES 87-90

You can also configure a theme to enable consistent plotting across
multiple plots.  These theme parameters override any unset keyword
arguments.  For example:

.. GENERATED FROM PYTHON SOURCE LINES 90-100

.. code-block:: Python


    my_theme = pymapdl.MapdlTheme()
    my_theme.background = "white"
    my_theme.cmap = "jet"  # colormap
    my_theme.axes.show = False
    my_theme.show_scalar_bar = False

    mapdl.aplot(theme=my_theme, quality=8)



.. GENERATED FROM PYTHON SOURCE LINES 101-106

Accessesing Element and Nodes Pythonically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PyMAPDL also supports element and nodal plotting using ``eplot`` and
``nplot``.  First, mesh the bracket using SOLID187 elements.  These
are well suited to this geometry and the static structural analyses.

.. GENERATED FROM PYTHON SOURCE LINES 106-117

.. code-block:: Python


    # set the preprocessor, element type and size, and mesh the volume
    mapdl.prep7()
    mapdl.et(1, "SOLID187")
    mapdl.esize(0.075)
    mapdl.vmesh("all")

    # print out the mesh characteristics
    print(mapdl.mesh)



.. GENERATED FROM PYTHON SOURCE LINES 118-120

You can access the underlying finite element mesh as a VTK grid
through the ``mesh.grid`` attribute.

.. GENERATED FROM PYTHON SOURCE LINES 120-125

.. code-block:: Python


    grid = mapdl.mesh.grid
    grid



.. GENERATED FROM PYTHON SOURCE LINES 126-130

This UnstructuredGrid contains a powerful API, including the ability
to access the nodes, elements, original node numbers, all with the
ability to plot the mesh and add new attributes and data to the
grid.

.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: Python


    grid.points  # same as mapdl.mesh.nodes



.. GENERATED FROM PYTHON SOURCE LINES 135-136

cell representation in VTK format

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: Python


    grid.cells



.. GENERATED FROM PYTHON SOURCE LINES 141-142

Obtain node numbers of the grid

.. GENERATED FROM PYTHON SOURCE LINES 142-146

.. code-block:: Python


    grid.point_data["ansys_node_num"]



.. GENERATED FROM PYTHON SOURCE LINES 147-148

Save arbitrary data to the grid

.. GENERATED FROM PYTHON SOURCE LINES 148-154

.. code-block:: Python


    # must be sized to the number of points
    grid.point_data["my_data"] = np.arange(grid.n_points)
    grid.point_data



.. GENERATED FROM PYTHON SOURCE LINES 155-157

Plot this mesh with scalars of your choosing.  You can apply the
same MapdlTheme when plotting as it's compatible with the grid plotter.

.. GENERATED FROM PYTHON SOURCE LINES 157-171

.. code-block:: Python


    # make interesting scalars
    scalars = grid.points[:, 2]  # z coordinates

    sbar_kwargs = {"color": "black", "title": "Z Coord"}
    grid.plot(
        scalars=scalars,
        show_scalar_bar=True,
        scalar_bar_args=sbar_kwargs,
        show_edges=True,
        theme=my_theme,
    )



.. GENERATED FROM PYTHON SOURCE LINES 172-180

This grid can be also saved to disk in the compact cross-platform VTK
format and loaded again with ``pyvista`` or ParaView.

..code:: pycon

    >>> grid.save('my_mesh.vtk')
    >>> import pyvista
    >>> imported_mesh = pyvista.read('my_mesh.vtk')

.. GENERATED FROM PYTHON SOURCE LINES 182-185

Stop mapdl
~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 185-186

.. code-block:: Python

    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_geometry.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: geometry.ipynb <geometry.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: geometry.py <geometry.py>`

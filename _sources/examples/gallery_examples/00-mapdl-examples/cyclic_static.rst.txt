
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/cyclic_static.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_cyclic_static.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_cyclic_static.py:


.. _ref_cyclic_static_analysis:

Static Cyclic Analysis
----------------------

Run a static cyclic analysis of an example rotor sector using the imperial unit
system at 1000 RPM.

.. GENERATED FROM PYTHON SOURCE LINES 34-42

.. code-block:: Python

    from ansys.mapdl.reader import examples

    from ansys.mapdl.core import launch_mapdl

    # launch mapdl
    mapdl = launch_mapdl()



.. GENERATED FROM PYTHON SOURCE LINES 43-46

Load in the mesh
~~~~~~~~~~~~~~~~
Load in the example sector and plot it.

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: Python

    mapdl.cdread("db", examples.sector_archive_file)
    mapdl.eplot()



.. GENERATED FROM PYTHON SOURCE LINES 51-54

Make the rotor cyclic
~~~~~~~~~~~~~~~~~~~~~
Enter the preprocessing routine and make the mesh cyclic.

.. GENERATED FROM PYTHON SOURCE LINES 54-61

.. code-block:: Python

    mapdl.prep7()
    mapdl.shpp("off")
    mapdl.nummrg(label="NODE", toler=1e-3)

    mapdl.cyclic()



.. GENERATED FROM PYTHON SOURCE LINES 62-66

Set material properties
~~~~~~~~~~~~~~~~~~~~~~~
Units are in imperial units and the material is (approximately) structural
steel.

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: Python

    mapdl.mp("NUXY", 1, 0.31)
    mapdl.mp("DENS", 1, 4.1408e-04)
    mapdl.mp("EX", 1, 16900000)



.. GENERATED FROM PYTHON SOURCE LINES 72-75

Apply boundary conditions
~~~~~~~~~~~~~~~~~~~~~~~~~
Apply a cyclic rotation at 1000 RPM and constrain the rotor at the center.

.. GENERATED FROM PYTHON SOURCE LINES 75-85

.. code-block:: Python

    mapdl.omega(0, 0, 1000)  # 1000 RPM

    mapdl.csys(1)  # enter the cyclic coordinate system

    mapdl.nsel("S", "loc", "x", 0, 0.71)  # radial between 0.69 - 0.71
    mapdl.d("ALL", "ALL")  # all DOF for those 8 nodes

    mapdl.allsel()
    mapdl.csys(0)  # return to cartesian coordinate system


.. GENERATED FROM PYTHON SOURCE LINES 86-89

Run a static analysis
~~~~~~~~~~~~~~~~~~~~~
Run the MAPDL solver and print the output of the solution.

.. GENERATED FROM PYTHON SOURCE LINES 89-96

.. code-block:: Python

    mapdl.run("/SOLU")
    mapdl.antype("STATIC")
    output = mapdl.solve()
    mapdl.finish()
    print(output)



.. GENERATED FROM PYTHON SOURCE LINES 97-100

Plot the cyclic result
~~~~~~~~~~~~~~~~~~~~~~
Plot the result using the legacy

.. GENERATED FROM PYTHON SOURCE LINES 100-103

.. code-block:: Python

    mapdl.result.plot_nodal_displacement(0)



.. GENERATED FROM PYTHON SOURCE LINES 104-107

Exit MAPDL
~~~~~~~~~~
Finally, exit MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 107-108

.. code-block:: Python

    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_cyclic_static.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cyclic_static.ipynb <cyclic_static.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cyclic_static.py <cyclic_static.py>`


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/torsional_load.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_torsional_load.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_torsional_load.py:


.. _ref_tors_load:

Torsional load on a bar using SURF154 elements
==============================================

This Ansys PyMAPDL script builds a bar and applies torque to it using
SURF154 elements. This is a static analysis example.

.. GENERATED FROM PYTHON SOURCE LINES 34-36

Script initialization
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-47

.. code-block:: Python


    import os

    import numpy as np

    from ansys.mapdl.core import launch_mapdl

    # start Ansys in the current working directory with default jobname "file"
    mapdl = launch_mapdl(run_location=os.getcwd(), version=23.1)



.. GENERATED FROM PYTHON SOURCE LINES 48-49

Define cylinder and mesh parameters

.. GENERATED FROM PYTHON SOURCE LINES 49-59

.. code-block:: Python


    torque = 100
    radius = 2
    h_tip = 2
    height = 20
    elemsize = 0.5
    pi = np.arccos(-1)
    force = 100 / radius
    pressure = force / (h_tip * 2 * np.pi * radius)


.. GENERATED FROM PYTHON SOURCE LINES 60-62

Model creation
--------------

.. GENERATED FROM PYTHON SOURCE LINES 62-72

.. code-block:: Python


    # Define higher-order SOLID186
    # Define surface effect elements SURF154 to apply torque
    # as a tangential pressure
    mapdl.prep7()
    mapdl.et(1, 186)
    mapdl.et(2, 154)
    mapdl.r(1)
    mapdl.r(2)


.. GENERATED FROM PYTHON SOURCE LINES 73-74

Aluminum properties (or something)

.. GENERATED FROM PYTHON SOURCE LINES 74-89

.. code-block:: Python

    mapdl.mp("ex", 1, 10e6)
    mapdl.mp("nuxy", 1, 0.3)
    mapdl.mp("dens", 1, 0.1 / 386.1)
    mapdl.mp("dens", 2, 0)

    # Simple cylinder
    for i in range(4):
        mapdl.cylind(radius, "", "", height, 90 * (i - 1), 90 * i)

    mapdl.nummrg("kp")

    # interactive volume plot (optional)
    mapdl.vplot()



.. GENERATED FROM PYTHON SOURCE LINES 90-91

Mesh cylinder

.. GENERATED FROM PYTHON SOURCE LINES 91-112

.. code-block:: Python

    mapdl.lsel("s", "loc", "x", 0)
    mapdl.lsel("r", "loc", "y", 0)
    mapdl.lsel("r", "loc", "z", 0, height - h_tip)
    mapdl.lesize("all", elemsize * 2)
    mapdl.mshape(0)
    mapdl.mshkey(1)
    mapdl.esize(elemsize)
    mapdl.allsel("all")
    mapdl.vsweep("ALL")
    mapdl.csys(1)
    mapdl.asel("s", "loc", "z", "", height - h_tip + 0.0001)
    mapdl.asel("r", "loc", "x", radius)
    mapdl.local(11, 1)
    mapdl.csys(0)
    mapdl.aatt(2, 2, 2, 11)
    mapdl.amesh("all")
    mapdl.finish()

    # plot elements
    mapdl.eplot()


.. GENERATED FROM PYTHON SOURCE LINES 113-115

Solution
--------

.. GENERATED FROM PYTHON SOURCE LINES 115-135

.. code-block:: Python


    mapdl.slashsolu()  # Using Slash instead of / due to duplicate SOLU command
    mapdl.antype("static", "new")
    mapdl.eqslv("pcg", 1e-8)

    # Apply tangential pressure
    mapdl.esel("s", "type", "", 2)
    mapdl.sfe("all", 2, "pres", "", pressure)

    # Constrain bottom of cylinder/rod
    mapdl.asel("s", "loc", "z", 0)
    mapdl.nsla("s", 1)

    mapdl.d("all", "all")
    mapdl.allsel()
    mapdl.psf("pres", "", 2)
    mapdl.pbc("u", 1)
    mapdl.solve()



.. GENERATED FROM PYTHON SOURCE LINES 136-138

Post-processing
---------------

.. GENERATED FROM PYTHON SOURCE LINES 138-145

.. code-block:: Python


    # Enter post-processor
    mapdl.post1()
    # Select the step you want to analyse
    mapdl.set(1, 1)



.. GENERATED FROM PYTHON SOURCE LINES 146-147

Access element results as arrays

.. GENERATED FROM PYTHON SOURCE LINES 147-153

.. code-block:: Python

    nodal_stress = mapdl.post_processing.nodal_stress_intensity()
    elem_stress = mapdl.post_processing.element_stress("int")

    print("Nodal stress : ", nodal_stress)
    print("Element stress : ", elem_stress)


.. GENERATED FROM PYTHON SOURCE LINES 154-156

Plot interactively
~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 156-162

.. code-block:: Python


    mapdl.post_processing.plot_nodal_displacement(cmap="bwr")
    mapdl.post_processing.plot_nodal_component_stress("x", cmap="bwr")
    mapdl.post_processing.plot_nodal_eqv_stress(cmap="bwr")



.. GENERATED FROM PYTHON SOURCE LINES 163-165

Plot non-interactively
~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 165-183

.. code-block:: Python


    # Setting up the correct camera angle
    cpos = [
        (20.992831318277517, 9.78629316586435, 31.905115108541928),
        (0.35955395443745797, -1.4198191001571547, 10.346158032932495),
        (-0.10547549888485548, 0.9200673323892437, -0.377294345312956),
    ]

    mapdl.post_processing.plot_nodal_displacement(
        cmap="bwr", cpos=cpos, savefig="cylinder_disp.png"
    )
    mapdl.post_processing.plot_nodal_component_stress(
        "x", cmap="bwr", cpos=cpos, savefig="cylinder_comp_stx.png"
    )
    mapdl.post_processing.plot_nodal_eqv_stress(
        cmap="bwr", cpos=cpos, savefig="cylinder_eqv_st.png"
    )


.. GENERATED FROM PYTHON SOURCE LINES 184-186

Stop MAPDL


.. GENERATED FROM PYTHON SOURCE LINES 186-188

.. code-block:: Python

    mapdl.finish()
    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_torsional_load.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: torsional_load.ipynb <torsional_load.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: torsional_load.py <torsional_load.py>`


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/lathe_cutter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:


.. _ref_lathe_cutter_example:

=====================================
Structural Analysis of a Lathe Cutter
=====================================

Basic walk through PyMAPDL capabilities.

Objective
=========

The objective of this example is to highlight some regularly used
PyMAPDL features via a lathe cutter finite element model. Lathe
cutters have multiple avenues of wear and failure, and the analyses
supporting their design would most often be transient
thermal-structural. However, for simplicity, this simulation
example uses a non-uniform load.

.. figure:: ../../../images/lathe_cutter_model.png
    :align: center
    :width: 600
    :alt:  Lathe cutter geometry and load description.
    :figclass: align-center

    **Figure 1: Lathe cutter geometry and load description.**



Contents
========

1. **Variables and launch**
   Define necessary variables and launch MAPDL.

2. **Geometry, mesh, and MAPDL parameters**
   Import geometry and inspect for MAPDL parameters. Define linear
   elastic material model with Python variables. Mesh and apply symmetry
   boundary conditions.

3. **Coordinate system and load**
   Create a local coordinate system for the applied load and verify with
   a plot.

4. **Pressure load**
   Define the pressure load as a sine function of the length of the
   application area using numpy arrays. Import the pressure array into
   MAPDL as a table array. Verify the applied load and solve.

5. **Plotting**
   Show result plotting, plotting with selection, and working with the
   plot legend.

6. **Postprocessing:**
   List a result two ways: use PyMAPDL and the Pythonic version of APDL.
   Demonstrate extended methods and writing a list to a file.

7. **Advanced plotting**
   Use of :class:`pyvista.UnstructuredGrid`
   for additional postprocessing.


Step 1: Variables and launch
============================

Define variables and launch MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 90-104

.. code-block:: Python


    import os

    import numpy as np

    from ansys.mapdl.core import launch_mapdl
    from ansys.mapdl.core.examples.downloads import download_example_data

    # cwd = current working directory
    path = os.getcwd()
    PI = np.pi
    EXX = 1.0e7
    NU = 0.27


.. GENERATED FROM PYTHON SOURCE LINES 105-120

Often used MAPDL command line options are exposed as Pythonic parameter names in
:func:`ansys.mapdl.core.launcher.launch_mapdl`. For example, ``-dir``
has become ``run_location``.
You could use ``run_location`` to specify the MAPDL run location. For example:

.. code:: python3

   mapdl = launch_mapdl(run_location=path)

Otherwise, the MAPDL working directory is stored in ``mapdl.directory``. In this
directory, MAPDL will create some of the images we will show later.

Options without a Pythonic version can be accessed by the ``additional_switches``
parameter.
Here ``-smp`` is used only to keep the number of solver files to a minimum.

.. GENERATED FROM PYTHON SOURCE LINES 120-123

.. code-block:: Python


    mapdl = launch_mapdl(additional_switches="-smp")


.. GENERATED FROM PYTHON SOURCE LINES 124-130

Step 2: Geometry, mesh, and MAPDL parameters
============================================

- Import geometry and inspect for MAPDL parameters.
- Define material and mesh, and then create boundary conditions.


.. GENERATED FROM PYTHON SOURCE LINES 130-134

.. code-block:: Python


    # First, reset the MAPDL database.
    mapdl.clear()


.. GENERATED FROM PYTHON SOURCE LINES 135-136

Import the geometry file and list any MAPDL parameters.

.. GENERATED FROM PYTHON SOURCE LINES 136-141

.. code-block:: Python

    lathe_cutter_geo = download_example_data("LatheCutter.anf", "geometry")
    mapdl.input(lathe_cutter_geo)
    mapdl.finish()
    print(mapdl.parameters)


.. GENERATED FROM PYTHON SOURCE LINES 142-143

Use pressure area per length in the load definition.

.. GENERATED FROM PYTHON SOURCE LINES 143-147

.. code-block:: Python

    pressure_length = mapdl.parameters["PRESS_LENGTH"]

    print(mapdl.parameters)


.. GENERATED FROM PYTHON SOURCE LINES 148-149

Change the units and title.

.. GENERATED FROM PYTHON SOURCE LINES 149-152

.. code-block:: Python

    mapdl.units("Bin")
    mapdl.title("Lathe Cutter")


.. GENERATED FROM PYTHON SOURCE LINES 153-154

Set material properties.

.. GENERATED FROM PYTHON SOURCE LINES 154-158

.. code-block:: Python

    mapdl.prep7()
    mapdl.mp("EX", 1, EXX)
    mapdl.mp("NUXY", 1, NU)


.. GENERATED FROM PYTHON SOURCE LINES 159-162

The MAPDL element type ``SOLID285`` is used for demonstration purposes.
Consider using an appropriate element type or mesh density for your actual
application.

.. GENERATED FROM PYTHON SOURCE LINES 162-173

.. code-block:: Python


    mapdl.et(1, 285)
    mapdl.smrtsize(4)
    mapdl.aesize(14, 0.0025)
    mapdl.vmesh(1)

    mapdl.da(11, "symm")
    mapdl.da(16, "symm")
    mapdl.da(9, "symm")
    mapdl.da(10, "symm")


.. GENERATED FROM PYTHON SOURCE LINES 174-181

Step 3: Coordinate system and load
==============================================

Create a local Coordinate System (CS) for the applied pressure as a function
of local X.

Local CS ID is 11

.. GENERATED FROM PYTHON SOURCE LINES 181-193

.. code-block:: Python


    mapdl.cskp(11, 0, 2, 1, 13)
    mapdl.csys(1)
    mapdl.view(1, -1, 1, 1)
    mapdl.psymb("CS", 1)
    mapdl.vplot(
        color_areas=True,
        show_lines=True,
        cpos=[-1, 1, 1],
        smooth_shading=True,
    )


.. GENERATED FROM PYTHON SOURCE LINES 194-197

VTK plots do not show MAPDL plot symbols.
However, to use MAPDL plotting capabilities, you can set the keyword
option ``vtk`` to ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 198-201

.. code-block:: Python


    mapdl.lplot(vtk=False)


.. GENERATED FROM PYTHON SOURCE LINES 202-207

Step 4: Pressure load
=================================

Create a pressure load, load it into MAPDL as a table array, verify the load,
and solve.

.. GENERATED FROM PYTHON SOURCE LINES 207-218

.. code-block:: Python


    # pressure_length = 0.055 inch

    pts = 10
    pts_1 = pts - 1

    length_x = np.arange(0, pts, 1)
    length_x = length_x * pressure_length / pts_1

    press = 10000 * (np.sin(PI * length_x / pressure_length))


.. GENERATED FROM PYTHON SOURCE LINES 219-222

``length_x`` and ``press`` are vectors. To combine them into the correct
form needed to define the MAPDL table array, you can use
`numpy.stack <https://numpy.org/doc/stable/reference/generated/numpy.stack.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 222-231

.. code-block:: Python


    press = np.stack((length_x, press), axis=-1)
    mapdl.load_table("MY_PRESS", press, "X", csysid=11)

    mapdl.asel("S", "Area", "", 14)
    mapdl.nsla("S", 1)
    mapdl.sf("All", "Press", "%MY_PRESS%")
    mapdl.allsel()


.. GENERATED FROM PYTHON SOURCE LINES 232-239

You can open the MAPDL GUI to check the model.

.. code:: python

    mapdl.open_gui()



.. GENERATED FROM PYTHON SOURCE LINES 241-242

Set up the solution.

.. GENERATED FROM PYTHON SOURCE LINES 242-249

.. code-block:: Python

    mapdl.finish()
    mapdl.slashsolu()
    mapdl.nlgeom("On")
    mapdl.psf("PRES", "NORM", 3, 0, 1)
    mapdl.view(1, -1, 1, 1)
    mapdl.eplot(vtk=False)


.. GENERATED FROM PYTHON SOURCE LINES 250-251

Solve the model.

.. GENERATED FROM PYTHON SOURCE LINES 251-256

.. code-block:: Python

    mapdl.solve()
    mapdl.finish()
    if mapdl.solution.converged:
        print("The solution has converged.")


.. GENERATED FROM PYTHON SOURCE LINES 257-260

Step 5: Plotting
================


.. GENERATED FROM PYTHON SOURCE LINES 260-267

.. code-block:: Python


    mapdl.post1()
    mapdl.set("last")
    mapdl.allsel()

    mapdl.post_processing.plot_nodal_principal_stress("1", smooth_shading=False)


.. GENERATED FROM PYTHON SOURCE LINES 268-271

Plotting - Part of Model
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: Python


    mapdl.csys(1)
    mapdl.nsel("S", "LOC", "Z", -0.5, -0.141)
    mapdl.esln()
    mapdl.nsle()
    mapdl.post_processing.plot_nodal_principal_stress(
        "1", edge_color="white", show_edges=True
    )


.. GENERATED FROM PYTHON SOURCE LINES 281-284

Plotting - Legend Options
-------------------------


.. GENERATED FROM PYTHON SOURCE LINES 284-302

.. code-block:: Python


    mapdl.allsel()
    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }
    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        background="white",
        edge_color="black",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=9,
    )


.. GENERATED FROM PYTHON SOURCE LINES 303-311

Let's try out some scalar bar options from the
`PyVista documentation <pyvista_docs_>`_.
For example, let's set black text on a beige background.

The scalar bar keywords defined as a Python dictionary are an alternate
method to using {key:value}'s.
You can use the click-and drag method to reposition the scalar bar.
Left-click it and hold down the left mouse button while moving the mouse.

.. GENERATED FROM PYTHON SOURCE LINES 311-339

.. code-block:: Python


    sbar_kwargs = dict(
        title_font_size=20,
        label_font_size=16,
        shadow=True,
        n_labels=9,
        italic=True,
        bold=True,
        fmt="%.1f",
        font_family="arial",
        title="1st Principal Stress (psi)",
        color="black",
    )

    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        edge_color="black",
        background="beige",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=256,
        cmap="jet",
    )

    # cmap names *_r usually reverses values.  Try cmap='jet_r'



.. GENERATED FROM PYTHON SOURCE LINES 340-347

Step 6: Postprocessing
=======================

Results List
------------

Get all principal nodal stresses.

.. GENERATED FROM PYTHON SOURCE LINES 347-349

.. code-block:: Python

    mapdl.post_processing.nodal_principal_stress("1")


.. GENERATED FROM PYTHON SOURCE LINES 350-351

Get the principal nodal stresses of the node subset.

.. GENERATED FROM PYTHON SOURCE LINES 351-361

.. code-block:: Python

    mapdl.nsel("S", vmin=1200, vmax=1210)
    mapdl.esln()
    mapdl.nsle()

    print("The node numbers are:")
    print(mapdl.mesh.nnum)  # get node numbers

    print("The principal nodal stresses are:")
    mapdl.post_processing.nodal_principal_stress("1")


.. GENERATED FROM PYTHON SOURCE LINES 362-365

Results as lists, arrays, and DataFrames
-----------------------------------------
Using :meth:`mapdl.prnsol` to check

.. GENERATED FROM PYTHON SOURCE LINES 365-367

.. code-block:: Python

    print(mapdl.prnsol("S", "PRIN"))


.. GENERATED FROM PYTHON SOURCE LINES 368-369

Use this command to obtain the data as a list.

.. GENERATED FROM PYTHON SOURCE LINES 369-372

.. code-block:: Python

    mapdl_s_1_list = mapdl.prnsol("S", "PRIN").to_list()
    print(mapdl_s_1_list)


.. GENERATED FROM PYTHON SOURCE LINES 373-374

Use this command to obtain the data as an array:

.. GENERATED FROM PYTHON SOURCE LINES 374-377

.. code-block:: Python

    mapdl_s_1_array = mapdl.prnsol("S", "PRIN").to_array()
    print(mapdl_s_1_array)


.. GENERATED FROM PYTHON SOURCE LINES 378-379

or as a DataFrame:

.. GENERATED FROM PYTHON SOURCE LINES 379-382

.. code-block:: Python

    mapdl_s_1_df = mapdl.prnsol("S", "PRIN").to_dataframe()
    mapdl_s_1_df.head()


.. GENERATED FROM PYTHON SOURCE LINES 383-387

Use this command to obtain the data as a DataFrame, which is a.
`Pandas data type <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.
Because the Pandas module is imported, you can use its functions.
For example, you can write principal stresses to a file.

.. GENERATED FROM PYTHON SOURCE LINES 387-392

.. code-block:: Python


    # mapdl_s_1_df.to_csv(path + '\prin-stresses.csv')
    # mapdl_s_1_df.to_json(path + '\prin-stresses.json')
    mapdl_s_1_df.to_html(path + "\prin-stresses.html")


.. GENERATED FROM PYTHON SOURCE LINES 393-396

Step 7: Advanced plotting
=========================


.. GENERATED FROM PYTHON SOURCE LINES 396-400

.. code-block:: Python


    mapdl.allsel()
    principal_1 = mapdl.post_processing.nodal_principal_stress("1")


.. GENERATED FROM PYTHON SOURCE LINES 401-402

Load this result into the VTK grid.

.. GENERATED FROM PYTHON SOURCE LINES 402-412

.. code-block:: Python

    grid = mapdl.mesh.grid
    grid["p1"] = principal_1

    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }


.. GENERATED FROM PYTHON SOURCE LINES 413-418

Generate a single horizontal slice along the XY plane.

.. note::
   PyVista's ``eye_dome_lighting`` method is used here to enhance the plots of the slices.
   For more information, see`Eye Dome Lighting <pyvista_eye_dome_lighting_>`_.

.. GENERATED FROM PYTHON SOURCE LINES 418-431

.. code-block:: Python


    single_slice = grid.slice(normal=[0, 0, 1], origin=[0, 0, 0])
    single_slice.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )


.. GENERATED FROM PYTHON SOURCE LINES 432-433

Generate a plot with three slice planes.

.. GENERATED FROM PYTHON SOURCE LINES 433-445

.. code-block:: Python

    slices = grid.slice_orthogonal()
    slices.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )


.. GENERATED FROM PYTHON SOURCE LINES 446-448

Generate a grid with multiple slices in the same plane.


.. GENERATED FROM PYTHON SOURCE LINES 448-460

.. code-block:: Python

    slices = grid.slice_along_axis(12, "x")
    slices.plot(
        scalars="p1",
        background="white",
        show_edges=False,
        lighting=False,
        eye_dome_lighting=True,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )


.. GENERATED FROM PYTHON SOURCE LINES 461-462

Finally, exit MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 462-463

.. code-block:: Python

    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lathe_cutter.ipynb <lathe_cutter.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lathe_cutter.py <lathe_cutter.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: lathe_cutter.zip <lathe_cutter.zip>`

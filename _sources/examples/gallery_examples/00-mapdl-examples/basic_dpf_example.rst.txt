
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/basic_dpf_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_basic_dpf_example.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_basic_dpf_example.py:


.. _ref_dpf_basic_example:

Basic DPF-Core Usage with PyMAPDL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This example is adapted from
`Basic DPF-Core Usage Example <https://dpf.docs.pyansys.com/version/stable/examples/00-basic/00-basic_example.html>`_
and it shows how to open a result file in `DPF <https://dpf.docs.pyansys.com/>`_ and do some
basic postprocessing.

If you have Ansys 2021 R1 installed, starting DPF is quite easy
as DPF-Core takes care of launching all the services that
are required for postprocessing Ansys files.

First, import the DPF-Core module as ``dpf_core`` and import the
included examples file.

.. GENERATED FROM PYTHON SOURCE LINES 43-50

.. code-block:: Python

    import tempfile

    from ansys.dpf import core as dpf

    from ansys.mapdl.core import launch_mapdl
    from ansys.mapdl.core.examples import vmfiles


.. GENERATED FROM PYTHON SOURCE LINES 51-56

Create model
~~~~~~~~~~~~~~

Running an example from the MAPDL verification manual


.. GENERATED FROM PYTHON SOURCE LINES 56-69

.. code-block:: Python

    mapdl = launch_mapdl()

    vm5 = vmfiles["vm5"]
    output = mapdl.input(vm5)

    print(output)

    # If you are working locally, you don't need to perform the following steps
    temp_directory = tempfile.gettempdir()

    # Downloading RST file to the current folder
    rst_path = mapdl.download_result(temp_directory)


.. GENERATED FROM PYTHON SOURCE LINES 70-83

Next, open the generated RST file and print out the
:class:`Model <ansys.dpf.core.model.Model>` object.
The :class:`Model <ansys.dpf.core.model.Model>` class helps to
organize access methods for the result by
keeping track of the operators and data sources used by the result
file.

Printing the model displays:

- Analysis type
- Available results
- Size of the mesh
- Number of results

.. GENERATED FROM PYTHON SOURCE LINES 85-88

If you are working with a remote server, you might need to upload the ``RST``
file before working with it.
Then you can create the :class:`DPF Model <ansys.dpf.core.model.Model>`.

.. GENERATED FROM PYTHON SOURCE LINES 88-99

.. code-block:: Python


    dpf.core.make_tmp_dir_server(dpf.SERVER)

    if dpf.SERVER.local_server:
        model = dpf.Model(rst_path)
    else:
        server_file_path = dpf.upload_file_in_tmp_folder(rst_path)
        model = dpf.Model(server_file_path)

    print(model)


.. GENERATED FROM PYTHON SOURCE LINES 100-106

Model Metadata
~~~~~~~~~~~~~~
Specific metadata can be extracted from the model by referencing the
model's :attr:`metadata <ansys.dpf.core.model.Model.metadata>`
property.  For example, to print only the
:attr:`result_info <ansys.dpf.core.model.Metadata.result_info>`:

.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: Python


    metadata = model.metadata
    print(metadata.result_info)


.. GENERATED FROM PYTHON SOURCE LINES 111-112

To print the :class:`mesh region<ansys.dpf.core.meshed_region.MeshedRegion>`:

.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: Python


    print(metadata.meshed_region)


.. GENERATED FROM PYTHON SOURCE LINES 116-118

To print the time or frequency of the results use
:class:`time_freq_support <ansys.dpf.core.time_freq_support.TimeFreqSupport>`:

.. GENERATED FROM PYTHON SOURCE LINES 118-121

.. code-block:: Python


    print(metadata.time_freq_support)


.. GENERATED FROM PYTHON SOURCE LINES 122-138

Extracting Displacement Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All results of the model can be accessed through the :class:`Results <ansys.dpf.core.results.Results>`
property, which returns the :class:`ansys.dpf.core.results.Results`
class. This class contains the DPF result operators available to a
specific result file, which are listed when printing the object with
``print(results)``.

Here, the :class:`displacement <ansys.dpf.core.operators.result.displacement.displacement>`
operator is connected with
:class:`DataSources <ansys.dpf.core.data_sources.DataSources>`, which
takes place automatically when running
:class:`results.displacement() <ansys.dpf.core.operators.result.displacement.displacement>`.
By default, the :class:`displacement <ansys.dpf.core.operators.result.displacement.displacement>`
operator is connected to the first result set,
which for this static result is the only result.

.. GENERATED FROM PYTHON SOURCE LINES 138-147

.. code-block:: Python


    results = model.results
    displacements = results.displacement()
    fields = displacements.outputs.fields_container()

    # Finally, extract the data of the displacement field:
    disp = fields[0].data
    disp


.. GENERATED FROM PYTHON SOURCE LINES 148-152

Plot displacements
~~~~~~~~~~~~~~~~~~

You can plot the previous displacement field using:

.. GENERATED FROM PYTHON SOURCE LINES 152-155

.. code-block:: Python


    model.metadata.meshed_region.plot(fields, cpos="xy")


.. GENERATED FROM PYTHON SOURCE LINES 156-158

Or using


.. GENERATED FROM PYTHON SOURCE LINES 158-161

.. code-block:: Python


    fields[0].plot(cpos="xy")


.. GENERATED FROM PYTHON SOURCE LINES 162-164

This way is particularly useful if you have used :class:`ansys.dpf.core.scoping.Scoping`
on the mesh or results.

.. GENERATED FROM PYTHON SOURCE LINES 167-172

Close session
~~~~~~~~~~~~~~

Stop MAPDL session.


.. GENERATED FROM PYTHON SOURCE LINES 172-173

.. code-block:: Python

    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_basic_dpf_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic_dpf_example.ipynb <basic_dpf_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic_dpf_example.py <basic_dpf_example.py>`


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/acoustic_analysis.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_acoustic_analysis.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_acoustic_analysis.py:


.. _acoustic_analysis_example:

====================
3D Acoustic Analysis
====================

This example shows how to perform an acoustic analysis using PyMAPDL and ``FLUID`` elements.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

Launch PyMAPDL
==============
Launch PyMAPDL and load ``matplotlib``.

.. GENERATED FROM PYTHON SOURCE LINES 37-47

.. code-block:: Python

    from matplotlib import pyplot as plt

    from ansys.mapdl.core import launch_mapdl

    mapdl = launch_mapdl()

    mapdl.clear()
    mapdl.prep7()
    mapdl.units("SI")  # SI - International system (m, kg, s, K).


.. GENERATED FROM PYTHON SOURCE LINES 48-51

Element and Material Properties
===============================
Define the ``FLUID30`` and ``FLUID130`` element types.

.. GENERATED FROM PYTHON SOURCE LINES 51-66

.. code-block:: Python


    mapdl.et(1, "FLUID30", kop1=2)


    # Define the material properties
    mapdl.mp("SONC", 1, 1500)  # sonc in m/s
    mapdl.mp("DENS", 1, 1000)  # Density in kg/m3
    print(mapdl.mplist())


    # Define the real const
    mapdl.r("1", "1e-6")  # Reference pressure for R set 1
    print(mapdl.rlist())



.. GENERATED FROM PYTHON SOURCE LINES 67-70

Geometry Definition
===================
Create a simple sphere.

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python


    vnum = mapdl.sphere(rad1=0.5, rad2=1.0)
    mapdl.vsbw("all")
    mapdl.vplot(show_area_numbering=True)


.. GENERATED FROM PYTHON SOURCE LINES 76-80

Geometry Meshing
================
First select the material and elements.


.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: Python


    mapdl.type(itype=1)
    mapdl.real(nset=1)
    mapdl.mat(mat=1)
    mapdl.mshape(1, "3D")


.. GENERATED FROM PYTHON SOURCE LINES 87-88

Then choose the element size and perform the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: Python


    mapdl.esize(0.25)
    mapdl.vmesh("all")
    mapdl.eplot(show_node_numbering=False)


.. GENERATED FROM PYTHON SOURCE LINES 94-98

Boundary Conditions
===================
Add surface boundary condition to the nodes using :func:`Mapdl.sf() <ansys.mapdl.core.Mapdl.sf>`
and the option ``SHLD`` for *Surface normal velocity or acceleration*.

.. GENERATED FROM PYTHON SOURCE LINES 98-106

.. code-block:: Python


    mapdl.csys(2)
    mapdl.asel("s", "loc", "x", 0.5)
    mapdl.csys(0)
    mapdl.nsla("S", 1)
    mapdl.sf("all", "SHLD", 5)
    mapdl.allsel()


.. GENERATED FROM PYTHON SOURCE LINES 107-111

Solve the model
===============
Using :func:`Mapdl.solve() <ansys.mapdl.core.Mapdl.solve>`


.. GENERATED FROM PYTHON SOURCE LINES 111-127

.. code-block:: Python

    mapdl.allsel()
    mapdl.run("/SOLU")
    mapdl.antype(3)
    mapdl.harfrq(freqb=200, freqe=1000)
    mapdl.autots("off")
    mapdl.nsubst(40)
    mapdl.kbc(0)

    mapdl.outres("erase")  # Save less data in order to reduce the size of .rst file
    mapdl.outres("all", "none")  # NOTE that other output like stresses is not saved
    mapdl.outres("nsol", "all")  # Save pressure and displacement
    mapdl.outres("fgrad", "all")  # Save velocities
    mapdl.outres("misc", "all")  # For post processing calculations

    mapdl.solve()


.. GENERATED FROM PYTHON SOURCE LINES 128-132

Post1: Time step results
========================

Listing the results

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: Python

    mapdl.post1()
    print(mapdl.set("LIST"))


.. GENERATED FROM PYTHON SOURCE LINES 136-140

Post26: Time dependent results
==============================

Getting results for specific nodes

.. GENERATED FROM PYTHON SOURCE LINES 140-164

.. code-block:: Python


    mapdl.post26()
    freqs = mapdl.post_processing.time_values[::2]
    node = 276

    # Getting results
    node_pressure = mapdl.nsol(3, node, "spl")
    node_sound_pressure_level = mapdl.nsol(4, node, "SPLA")

    # Plotting
    fig, ax = plt.subplots(1, 2)

    ax[0].plot(freqs, node_pressure)
    ax[0].set_xlabel("Frequencies (Hz)")
    ax[0].set_ylabel("Sound pressure level (Pa)")

    ax[1].plot(freqs, node_sound_pressure_level, label="Nodal Sound Pressure")
    ax[1].set_xlabel("Frequencies (Hz)")
    ax[1].set_ylabel("A-weighted sound\npressure level (dBA)")

    fig.suptitle(f"Node {node} Results")
    fig.tight_layout()
    fig.show()


.. GENERATED FROM PYTHON SOURCE LINES 165-167

Stop MAPDL


.. GENERATED FROM PYTHON SOURCE LINES 167-168

.. code-block:: Python

    mapdl.exit()


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_acoustic_analysis.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: acoustic_analysis.ipynb <acoustic_analysis.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: acoustic_analysis.py <acoustic_analysis.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: acoustic_analysis.zip <acoustic_analysis.zip>`
